// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: context.sql

package sqlc

import (
	"context"
)

const contextExists = `-- name: ContextExists :exec
SELECT id
FROM contexts
WHERE id = $1
`

func (q *Queries) ContextExists(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, contextExists, id)
	return err
}

const createContext = `-- name: CreateContext :exec
INSERT INTO contexts (id)
VALUES ($1)
`

func (q *Queries) CreateContext(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, createContext, id)
	return err
}

const listContexts = `-- name: ListContexts :many
SELECT id
FROM contexts
`

func (q *Queries) ListContexts(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listContexts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
