// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: log.sql

package sqlc

import (
	"context"

	"github.com/annexhq/annex/test"
	"github.com/google/uuid"
)

const createLog = `-- name: CreateLog :exec
INSERT INTO logs (id, test_exec_id, case_exec_id, level, message, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateLogParams struct {
	ID         uuid.UUID             `json:"id"`
	TestExecID test.TestExecutionID  `json:"test_exec_id"`
	CaseExecID *test.CaseExecutionID `json:"case_exec_id"`
	Level      string                `json:"level"`
	Message    string                `json:"message"`
	CreatedAt  Timestamp             `json:"created_at"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) error {
	_, err := q.db.Exec(ctx, createLog,
		arg.ID,
		arg.TestExecID,
		arg.CaseExecID,
		arg.Level,
		arg.Message,
		arg.CreatedAt,
	)
	return err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE
FROM logs
WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLog, id)
	return err
}

const getExecutionLog = `-- name: GetExecutionLog :one
SELECT id, test_exec_id, case_exec_id, level, message, created_at
FROM logs
WHERE id = $1
`

func (q *Queries) GetExecutionLog(ctx context.Context, id uuid.UUID) (*Log, error) {
	row := q.db.QueryRow(ctx, getExecutionLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.TestExecID,
		&i.CaseExecID,
		&i.Level,
		&i.Message,
		&i.CreatedAt,
	)
	return &i, err
}

const listTestExecutionLogs = `-- name: ListTestExecutionLogs :many
SELECT id, test_exec_id, case_exec_id, level, message, created_at
FROM logs
WHERE test_exec_id = $1
ORDER BY created_at
`

func (q *Queries) ListTestExecutionLogs(ctx context.Context, testExecID test.TestExecutionID) ([]*Log, error) {
	rows, err := q.db.Query(ctx, listTestExecutionLogs, testExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.TestExecID,
			&i.CaseExecID,
			&i.Level,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
